import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import os

# Import para anomalias
import numpy as np
from sklearn.ensemble import IsolationForest

def reduce_csv_size(input_csv, output_parquet, usecols=None, chunksize=10**6):
    """
    Lê o CSV pesado em chunks, realiza downcasting dos tipos numéricos 
    e salva o DataFrame em formato Parquet com compressão Snappy.
    """
    chunks = []
    for chunk in pd.read_csv(input_csv, usecols=usecols, chunksize=chunksize, 
                             encoding='latin1', sep=';', low_memory=False):
        # Downcasting de colunas numéricas inteiras
        for col in chunk.select_dtypes(include=['int64']).columns:
            chunk[col] = pd.to_numeric(chunk[col], downcast='integer')
        # Downcasting de colunas numéricas float
        for col in chunk.select_dtypes(include=['float64']).columns:
            chunk[col] = pd.to_numeric(chunk[col], downcast='float')
        chunks.append(chunk)
    
    df_reduced = pd.concat(chunks, ignore_index=True)
    df_reduced.to_parquet(output_parquet, compression='snappy', index=False)
    return df_reduced

@st.cache_data
def load_data(parquet_file):
    """Carrega os dados a partir do arquivo Parquet utilizando cache."""
    df = pd.read_parquet(parquet_file)
    return df

def detect_anomalies_iqr(df, column='QT_VOTOS'):
    """
    Marca como anomalia valores fora de [Q1 - 1.5*IQR, Q3 + 1.5*IQR].
    Retorna o DataFrame com uma coluna 'ANOMALIA_IQR' booleana.
    """
    df = df.copy()
    # Remover NaN
    df = df[df[column].notna()]
    
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lim_inferior = Q1 - 1.5 * IQR
    lim_superior = Q3 + 1.5 * IQR
    
    df['ANOMALIA_IQR'] = ~df[column].between(lim_inferior, lim_superior)
    return df

def detect_anomalies_zscore(df, column='QT_VOTOS', z_thresh=3.0):
    """
    Marca como anomalia valores cujo z-score (desvio em relação à média)
    é maior que z_thresh (padrão=3).
    Retorna o DataFrame com a coluna 'ANOMALIA_ZSCORE' booleana.
    """
    df = df.copy()
    df = df[df[column].notna()]
    
    mean_val = df[column].mean()
    std_val = df[column].std()
    # Evita divisão por zero
    if std_val == 0:
        df['ANOMALIA_ZSCORE'] = False
        return df

    df['Z_SCORE'] = (df[column] - mean_val) / std_val
    df['ANOMALIA_ZSCORE'] = df['Z_SCORE'].abs() > z_thresh
    return df

def detect_anomalies_isolation_forest(df, columns=['QT_VOTOS']):
    """
    Aplica Isolation Forest nas colunas especificadas. 
    Retorna o DataFrame com a coluna 'ANOMALIA_IF' booleana.
    """
    df = df.copy()
    # Remover linhas com NaN nessas colunas
    df = df.dropna(subset=columns)
    
    # Treina o Isolation Forest
    iso = IsolationForest(n_estimators=100, contamination='auto', random_state=42)
    iso.fit(df[columns])
    
    # predict() retorna 1 para normal e -1 para anomalia
    df['IF_PRED'] = iso.predict(df[columns])
    df['ANOMALIA_IF'] = df['IF_PRED'] == -1
    return df

def main():
    st.title("Dashboard - Análise dos Dados das Eleições 2022 (com Anomalias)")
    
    # 1) Carregamento/Conversão do CSV para Parquet (se necessário)
    csv_file = 'votacao_secao_2022_BR.csv'
    if not os.path.exists(csv_file):
        st.error(f"Arquivo CSV não encontrado. Verifique o caminho: {csv_file}")
        return
    
    parquet_file = 'votacao_secao_2022_BR.parquet'
    if not os.path.exists(parquet_file):
        st.info("Convertendo CSV para Parquet. Esse processo pode demorar um pouco...")
        reduce_csv_size(csv_file, parquet_file)
        st.success("Conversão concluída!")
    else:
        st.info("Carregando dados do arquivo Parquet...")
    
    df = load_data(parquet_file)
    
    # 2) Filtro por UF
    st.sidebar.header("Filtros")
    if 'SG_UF' in df.columns:
        ufs = sorted(df['SG_UF'].dropna().unique())
        uf = st.sidebar.selectbox("Selecione a UF", ufs)
        df_filtered = df[df['SG_UF'] == uf].copy()
        st.write(f"Visualizando dados para a UF: {uf}")
    else:
        st.error("Coluna 'SG_UF' não encontrada nos dados!")
        df_filtered = df.copy()
    
    # 3) Escolha de Método de Detecção de Anomalias
    st.sidebar.subheader("Método de Detecção de Anomalias")
    metodo_anomalia = st.sidebar.selectbox(
        "Selecione o método:",
        ["Nenhum", "IQR", "Z-Score", "Isolation Forest"]
    )
    
    # 4) Aplicar o método de anomalia escolhido
    df_anomalias = df_filtered.copy()
    col_votos = 'QT_VOTOS'  # Coluna de votos
    
    if metodo_anomalia == "IQR":
        df_anomalias = detect_anomalies_iqr(df_anomalias, column=col_votos)
        # Contar quantas anomalias
        num_anomalias = df_anomalias['ANOMALIA_IQR'].sum()
        st.write(f"Número de anomalias (IQR) detectadas: {num_anomalias}")
        
    elif metodo_anomalia == "Z-Score":
        df_anomalias = detect_anomalies_zscore(df_anomalias, column=col_votos, z_thresh=3.0)
        if 'ANOMALIA_ZSCORE' in df_anomalias.columns:
            num_anomalias = df_anomalias['ANOMALIA_ZSCORE'].sum()
            st.write(f"Número de anomalias (Z-Score) detectadas: {num_anomalias}")
        else:
            st.write("Não foi possível calcular Z-Score (desvio padrão zero).")
        
    elif metodo_anomalia == "Isolation Forest":
        # Você pode adicionar mais colunas aqui se quiser analisar multivariadamente.
        df_anomalias = detect_anomalies_isolation_forest(df_anomalias, columns=[col_votos])
        num_anomalias = df_anomalias['ANOMALIA_IF'].sum()
        st.write(f"Número de anomalias (Isolation Forest) detectadas: {num_anomalias}")
    
    # 5) Visualizações
    st.subheader("Histograma de Votos")
    if col_votos in df_anomalias.columns:
        fig, ax = plt.subplots()
        df_anomalias[col_votos].plot(kind='hist', bins=50, ax=ax)
        ax.set_xlabel("Quantidade de Votos")
        ax.set_title("Distribuição dos Votos")
        st.pyplot(fig)
    else:
        st.error(f"Coluna '{col_votos}' não encontrada nos dados!")
    
    # Visualizar somente as anomalias
    if metodo_anomalia != "Nenhum":
        st.subheader("Exemplo de Exibição de Anomalias")
        
        if metodo_anomalia == "IQR" and 'ANOMALIA_IQR' in df_anomalias.columns:
            df_outliers = df_anomalias[df_anomalias['ANOMALIA_IQR'] == True]
            st.write(df_outliers.head(20))
        elif metodo_anomalia == "Z-Score" and 'ANOMALIA_ZSCORE' in df_anomalias.columns:
            df_outliers = df_anomalias[df_anomalias['ANOMALIA_ZSCORE'] == True]
            st.write(df_outliers.head(20))
        elif metodo_anomalia == "Isolation Forest" and 'ANOMALIA_IF' in df_anomalias.columns:
            df_outliers = df_anomalias[df_anomalias['ANOMALIA_IF'] == True]
            st.write(df_outliers.head(20))
        else:
            st.write("Não foram detectadas anomalias ou coluna de anomalia não encontrada.")
    
if __name__ == '__main__':
    main()
